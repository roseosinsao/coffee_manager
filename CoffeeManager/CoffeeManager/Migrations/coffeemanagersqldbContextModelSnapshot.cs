// <auto-generated />
using System;
using CoffeeManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CoffeeManager.Migrations
{
    [DbContext(typeof(CoffeeManagerDBContext))]
    partial class coffeemanagersqldbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeManager.Models.Coffee", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Coffee");
                });

            modelBuilder.Entity("CoffeeManager.Models.CoffeeIngredient", b =>
                {
                    b.Property<Guid>("CoffeeId");

                    b.Property<Guid>("IngredientId");

                    b.Property<int>("ValueCost");

                    b.HasKey("CoffeeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CoffeeIngredient");
                });

            modelBuilder.Entity("CoffeeManager.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("CoffeeManager.Models.Office", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("CoffeeManager.Models.Orders", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CoffeeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PantryId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("PantryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeManager.Models.Pantry", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("OfficeId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Pantry");
                });

            modelBuilder.Entity("CoffeeManager.Models.Stock", b =>
                {
                    b.Property<Guid>("PantryId");

                    b.Property<Guid>("IngredientId");

                    b.Property<int>("Value");

                    b.HasKey("PantryId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("CoffeeManager.Models.CoffeeIngredient", b =>
                {
                    b.HasOne("CoffeeManager.Models.Coffee", "Coffee")
                        .WithMany("CoffeeIngredient")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeManager.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeManager.Models.Orders", b =>
                {
                    b.HasOne("CoffeeManager.Models.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeManager.Models.Pantry", "Pantry")
                        .WithMany("Orders")
                        .HasForeignKey("PantryId")
                        .HasConstraintName("FK_Order_Pantry");
                });

            modelBuilder.Entity("CoffeeManager.Models.Pantry", b =>
                {
                    b.HasOne("CoffeeManager.Models.Office", "Office")
                        .WithMany("Pantry")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_Pantry_Office");
                });

            modelBuilder.Entity("CoffeeManager.Models.Stock", b =>
                {
                    b.HasOne("CoffeeManager.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeManager.Models.Pantry", "Pantry")
                        .WithMany("Stock")
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
